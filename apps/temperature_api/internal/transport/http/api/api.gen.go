// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// TemperatureResponse defines model for TemperatureResponse.
type TemperatureResponse struct {
	Location  string    `json:"location"`
	SensorId  string    `json:"sensor_id"`
	Timestamp time.Time `json:"timestamp"`
	Value     float32   `json:"value"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /temperature/{sensorID})
	GetTemperatureBySensorID(ctx echo.Context, sensorID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTemperatureBySensorID converts echo context to params.
func (w *ServerInterfaceWrapper) GetTemperatureBySensorID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sensorID" -------------
	var sensorID string

	err = runtime.BindStyledParameterWithOptions("simple", "sensorID", ctx.Param("sensorID"), &sensorID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sensorID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTemperatureBySensorID(ctx, sensorID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/temperature/:sensorID", wrapper.GetTemperatureBySensorID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/2xSTWsbMRD9K2ba4zbrpIeGvbUUSm6l7S2YIq/HscKupEqzhrAI/FHopf8hp95DqcH0",
	"w/kL0j8qo3Vrh+xpZb/Re09vXgulro1WqMhB0YIrZ1iLdPyAtUErqLH4Dp3RyiH/baw2aEliGqp0KUhq",
	"xWe6MQgFOLJSXYHPwKFy2n6Uk16UZI2ORG0YnWpbC4ICJoLwGUOQPb4yF1WDR2SqqcdowfsMLH5qpMUJ",
	"FJf7sWP97GD0WHj0X0OPr7Ek8Ewl1VSzyARdaaXpnnccx0AYmXiowl5kjtZ1t0RJjajYuzaoGC3g+cnw",
	"ZAgZGEGzFGJOB4a87VxfvPYMXSHxRydYanUxgQLeIB1pvrp5v7+ROK2okdA6KC5bkOyBdSADJeqU5mG4",
	"W3bPcvyIA+12nhyeDYf8KbUiVMmRMKaSXaT5tesKcOB7anEKBTzJD+3K99XK+3qVcn+Yd7gNu/ArruOX",
	"sI2r+HUQV2ETfof7sImLcBdXcR0XcT0I92E3CNvwI2zCn7gK2/g5bMNPngi7NBGXCVryz3DHWj6V087/",
	"xdTYCgqYEZkiz9uZduSL1mhLnpcprBTjqguCsa4bU9FUXNjTsxe8z5NTePSCb2EXl3E1ePn2IpmIi/C9",
	"c8+FYP6HVOfD8x6W2/SMfhbvR/5vAAAA//9GpQmAwwMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
